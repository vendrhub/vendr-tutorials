@inherits VendrRazorTemplateView<IEnumerable<OrderReadOnly>>
@{
    // ========================================================
    //                I M P O R T A N T
    // ========================================================
    // THIS FILE WILL GET REPLACED DURING AN UPGRADE AND ANY
    // CHANGES YOU MAKE TO IT WILL BE LOST
    // ========================================================
    // DO NOT edit this file directly. If you need to change
    // it's behaviour, always take a copy and modify the copy,
    // updating the Email Template to use your new version.
    // ========================================================

    // ========================================================
    // Helpers
    // ========================================================

    Func<string, string> EscapeCsvValue = new Func<string, string>((value) =>
    {
        if (string.IsNullOrWhiteSpace(value))
            return "";

        var mustEsc = value.Contains(",")
            || value.Contains("\"")
            || value.Contains("\r")
            || value.Contains("\n");

        if (!mustEsc)
            return value;

        value = value.Replace("\"", "\"\"");

        return string.Format("\"{0}\"", value);
    });

    // ========================================================
    // Render
    // ========================================================

    if (Model.Any())
    {
        var headers = new[]
        {
            EscapeCsvValue("Cart Number"),

            EscapeCsvValue("First Name"),
            EscapeCsvValue("Last Name"),
            EscapeCsvValue("Email"),

            EscapeCsvValue("Billing Address Line 1"),
            EscapeCsvValue("Billing Address Line 2"),
            EscapeCsvValue("Billing City"),
            EscapeCsvValue("Billing Region"),
            EscapeCsvValue("Billing Country"),
            EscapeCsvValue("Billing Zip Code"),

            EscapeCsvValue("Shipping Address Line 1"),
            EscapeCsvValue("Shipping Address Line 2"),
            EscapeCsvValue("Shipping City"),
            EscapeCsvValue("Shipping Region"),
            EscapeCsvValue("Shipping Country"),
            EscapeCsvValue("Shipping Zip Code"),

            EscapeCsvValue("Order Line Sku"),
            EscapeCsvValue("Order Line Name"),
            EscapeCsvValue("Order Line Unit Price"),
            EscapeCsvValue("Order Line Quantity"),
            EscapeCsvValue("Order Line Total Price"),

            EscapeCsvValue("Order Subtotal"),
            EscapeCsvValue("Payment Method"),
            EscapeCsvValue("Payment Price"),
            EscapeCsvValue("Shipping Method"),
            EscapeCsvValue("Shipping Price"),
            EscapeCsvValue("Order Discount Code(s)"),
            EscapeCsvValue("Order Tax"),
            EscapeCsvValue("Order Total"),
            EscapeCsvValue("Order Gift Card Amount"),
            EscapeCsvValue("Order Transaction Amount"),

            EscapeCsvValue("Order Currency"),
            EscapeCsvValue("Order Date"),

            EscapeCsvValue("Comments"),
            EscapeCsvValue("Notes")
        };

        @Html.Raw(string.Join(",", headers))

        foreach (var order in Model)
        {
            var billingRegion = order.PaymentInfo.RegionId.HasValue ? VendrApi.GetRegion(order.PaymentInfo.RegionId.Value) : null;
            var billingCountry = order.PaymentInfo.CountryId.HasValue ? VendrApi.GetCountry(order.PaymentInfo.CountryId.Value) : null;
            var paymentMethod = order.PaymentInfo.PaymentMethodId.HasValue ? VendrApi.GetPaymentMethod(order.PaymentInfo.PaymentMethodId.Value) : null;

            var shippingRegion = order.ShippingInfo.RegionId.HasValue ? VendrApi.GetRegion(order.ShippingInfo.RegionId.Value) : null;
            var shippingCountry = order.ShippingInfo.CountryId.HasValue ? VendrApi.GetCountry(order.ShippingInfo.CountryId.Value) : null;
            var shippingMethod = order.ShippingInfo.ShippingMethodId.HasValue ? VendrApi.GetShippingMethod(order.ShippingInfo.ShippingMethodId.Value) : null;

            var currency = VendrApi.GetCurrency(order.CurrencyId);
            var orderStatus = VendrApi.GetOrderStatus(order.OrderStatusId);

            foreach (var orderLine in order.OrderLines)
            {
                @Html.Raw(Environment.NewLine);

                var values = new[]
                {
                    EscapeCsvValue(order.CartNumber),

                    EscapeCsvValue(order.CustomerInfo.FirstName),
                    EscapeCsvValue(order.CustomerInfo.LastName),
                    EscapeCsvValue(order.CustomerInfo.Email),

                    EscapeCsvValue(order.Properties["billingAddressLine1"]),
                    EscapeCsvValue(order.Properties["billingAddressLine2"]),
                    EscapeCsvValue(order.Properties["billingCity"]),
                    EscapeCsvValue(billingRegion != null ? billingRegion.Name : ""),
                    EscapeCsvValue(billingCountry != null ? billingCountry.Name : ""),
                    EscapeCsvValue(order.Properties["billingZipCode"]),

                    EscapeCsvValue(order.Properties["shippingAddressLine1"]),
                    EscapeCsvValue(order.Properties["shippingAddressLine2"]),
                    EscapeCsvValue(order.Properties["shippingCity"]),
                    EscapeCsvValue(shippingRegion != null ? shippingRegion.Name : ""),
                    EscapeCsvValue(shippingCountry != null ? shippingCountry.Name : ""),
                    EscapeCsvValue(order.Properties["shippingZipCode"]),

                    EscapeCsvValue(orderLine.Sku),
                    EscapeCsvValue(orderLine.Name),
                    EscapeCsvValue(orderLine.UnitPrice.Value.Formatted().WithoutTaxNoSymbol),
                    EscapeCsvValue(orderLine.Quantity.ToString("0")),
                    EscapeCsvValue(orderLine.TotalPrice.Value.Formatted().WithoutTaxNoSymbol),

                    EscapeCsvValue(order.SubtotalPrice.Value.Formatted().WithoutTaxNoSymbol),
                    EscapeCsvValue(paymentMethod != null ? paymentMethod.Name : ""),
                    EscapeCsvValue(order.PaymentInfo.TotalPrice.Value.Formatted().WithoutTaxNoSymbol),
                    EscapeCsvValue(shippingMethod != null ? shippingMethod.Name : ""),
                    EscapeCsvValue(order.ShippingInfo.TotalPrice.Value.Formatted().WithoutTaxNoSymbol),
                    EscapeCsvValue(string.Join(", ", order.DiscountCodes.Select(d => d.Code))),
                    EscapeCsvValue(order.TotalPrice.Value.Formatted().TaxNoSymbol),
                    EscapeCsvValue(order.TotalPrice.Value.Formatted().WithTaxNoSymbol),
                    EscapeCsvValue(order.GetTotalAmountAdjustmentByType<GiftCardAdjustment>().Formatted().ValueNoSymbol),
                    EscapeCsvValue(order.TransactionAmount.Value.Formatted().ValueNoSymbol),
                    EscapeCsvValue(currency != null ? currency.Code : ""),
                    EscapeCsvValue(order.CreateDate.ToString("yyyy-MM-dd HH:mm:ss")),

                    EscapeCsvValue(order.Properties["comments"]),
                    EscapeCsvValue(order.Properties["notes"])
                };

                @Html.Raw(string.Join(",", values));
            }
        }
    }
}