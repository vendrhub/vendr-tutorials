@inherits VendrRazorTemplateView<OrderReadOnly>
@{
    // ========================================================
    //                I M P O R T A N T
    // ========================================================
    // THIS FILE WILL GET REPLACED DURING AN UPGRADE AND ANY
    // CHANGES YOU MAKE TO IT WILL BE LOST
    // ========================================================
    // DO NOT edit this file directly. If you need to change
    // it's behaviour, always take a copy and modify the copy,
    // updating the Email Template to use your new version.
    // ========================================================

    // Get order entities
    var store = VendrApi.GetStore(Model.StoreId);
    var paymentMethod = Model.PaymentInfo.PaymentMethodId.HasValue
        ? VendrApi.GetPaymentMethod(Model.PaymentInfo.PaymentMethodId.Value)
        : null;
    var paymentCountry = Model.PaymentInfo.CountryId.HasValue
        ? VendrApi.GetCountry(Model.PaymentInfo.CountryId.Value)
        : null;
    var shippingMethod = Model.ShippingInfo.ShippingMethodId.HasValue
        ? VendrApi.GetShippingMethod(Model.ShippingInfo.ShippingMethodId.Value)
        : null;
    var shippingCountry = Model.ShippingInfo.CountryId.HasValue
        ? VendrApi.GetCountry(Model.ShippingInfo.CountryId.Value)
        : null;
}
<style type="text/css">
    .receipt * {
        font-family: Arial, Helvetica, sans-serif;
    }

    .receipt p, .receipt th, .receipt td {
        font-size: 14px;
        line-height: 20px;
        margin: 0;
        padding: 0;
    }

    .receipt h1 {
        font-size: 32px;
        line-height: 34px;
        margin: 0;
        padding: 0;
    }

    .receipt h2 {
        font-size: 18px;
        line-height: 24px;
        margin: 0;
        padding: 0;
    }

    .receipt p, .receipt h1, .receipt h2 {
        margin-bottom: 10px;
    }

    .receipt table {
        width: 100%;
    }

    .receipt .receipt__header {
        margin-bottom: 40px;
    }

        .receipt .receipt__header td:last-child {
            text-align: right;
        }

    .receipt .receipt__order-lines td,
    .receipt .receipt__totals td {
        vertical-align: top;
        text-align: right;
        white-space: nowrap;
        width: 1%;
        padding-left: 20px;
    }

        .receipt .receipt__order-lines td:first-child,
        .receipt .receipt__totals td:first-child {
            white-space: normal;
            padding-left: 0;
            width: 100%;
        }

        .receipt .receipt__order-lines td:first-child {
            text-align: left;
        }

    .receipt .receipt__order-lines tbody td {
        border-top: solid 1px #ddd;
        padding-top: 5px;
        padding-bottom: 5px;
    }

    .receipt hr {
        border: 0;
        border-top: solid 1px #000;
    }
</style>
<div class="receipt">

    <table class="receipt__header">
        <tr>
            <td>
                <h1>@store.Name - Receipt</h1>
            </td>
            <td>
                #@(Model.OrderNumber)<br />
                @Model.FinalizedDate.Value.ToString("MMM d, yyyy")
            </td>
        </tr>
    </table>

    <table class="receipt__customer-details">
        <tr>
            <td>
                <h2>Customer Information</h2>
                <p><strong>@Model.CustomerInfo.FirstName @Model.CustomerInfo.LastName</strong><br />@Model.CustomerInfo.Email</p>
            </td>
            <td></td>
        </tr>
        <tr>
            <td>
                <h2>Billing Information</h2>
                <p>
                    @{
                        var billingParts = new[]
                        {
                        $"{Model.CustomerInfo.FirstName} {Model.CustomerInfo.LastName}".Trim(),
                        Model.Properties["billingAddressLine1"],
                        Model.Properties["billingAddressLine2"],
                        Model.Properties["billingCity"],
                        Model.Properties["billingZipCode"],
                        paymentCountry.Name
                    };
                        @Html.Raw(string.Join("<br />", billingParts.Where(x => !string.IsNullOrWhiteSpace(x))))
                    }
                </p>
                @if (Model.Properties["billingTelephone"] != null)
                {
                    <p>Tel: @Model.Properties["billingTelephone"]</p>
                }
            </td>
            <td>
                <h2>Shipping Information</h2>
                <p>
                    @{
                        var shippingParts = new[]
                        {
                        $"{Model.Properties["shippingFirstName"]} {Model.Properties["shippingLastName"]}".Trim(),
                        Model.Properties["shippingAddressLine1"],
                        Model.Properties["shippingAddressLine2"],
                        Model.Properties["shippingCity"],
                        Model.Properties["shippingZipCode"],
                        shippingCountry.Name
                    };
                        @Html.Raw(string.Join("<br />", shippingParts.Where(x => !string.IsNullOrWhiteSpace(x))))
                    }
                </p>
                @if (Model.Properties["shippingTelephone"] != null)
                {
                    <p>Tel: @Model.Properties["shippingTelephone"]</p>
                }
            </td>
        </tr>
    </table>

    <hr />

    @if (Model.Properties["comments"] != null)
    {
        <h2>Comments</h2>
        <p>@Model.Properties["comments"]</p>
        <hr />
    }

    <h2>Order Details</h2>
    <table class="receipt__order-lines">
        <thead>
            <tr>
                <td><strong>Name</strong></td>
                <td><strong>Price</strong></td>
                <td><strong>Quantity</strong></td>
                <td><strong>Total</strong></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var orderLine in Model.OrderLines)
            {
                <tr>
                    <td>
                        @orderLine.Name
                        <br />
                        <span>
                            @orderLine.Sku
                            @if (orderLine.Attributes.Count > 0)
                            {
                                foreach (var attr in orderLine.Attributes)
                                {
                                    <text> / @(attr.Value)</text>
                                }
                            }
                        </span>
                    </td>
                    <td>
                        @orderLine.UnitPrice.Value.Formatted().WithoutTax
                        @if (orderLine.UnitPrice.Value != orderLine.UnitPrice.WithoutAdjustments)
                        {
                            <br />
                            <span>@orderLine.UnitPrice.WithoutAdjustments.Formatted().WithoutTax</span>
                        }
                    </td>
                    <td>
                        @((int)orderLine.Quantity)
                    </td>
                    <td>
                        @orderLine.TotalPrice.Value.Formatted().WithoutTax
                        @if (orderLine.TotalPrice.Value != orderLine.TotalPrice.WithoutAdjustments)
                        {
                            <br />
                            <span>@orderLine.TotalPrice.WithoutAdjustments.Formatted().WithoutTax</span>
                        }
                    </td>
                </tr>
            }

        </tbody>
    </table>
    <hr />
    <table class="receipt__totals">
        <tr>
            <td><strong>Subtotal</strong></td>
            <td>
                <strong>
                    @Model.SubtotalPrice.WithPreviousAdjustments.Formatted().WithoutTax
                </strong>
            </td>
        </tr>
        @{
            var subtotalFeesAdjustment = Model.SubtotalPrice.Adjustments.Where(adj => adj.Price.WithTax > 0).Sum(Model.CurrencyId);
            if (subtotalFeesAdjustment > 0)
            {
                <tr>
                    <td>
                        Subtotal Fees
                    </td>
                    <td>
                        @subtotalFeesAdjustment.Formatted().WithoutTax
                    </td>
                </tr>
            }

            var subtotalDiscountAdjustment = Model.SubtotalPrice.Adjustments.Where(adj => adj.Price.WithTax < 0).Sum(Model.CurrencyId);
            if (subtotalDiscountAdjustment < 0)
            {
                <tr>
                    <td>
                        Subtotal Discount
                    </td>
                    <td>
                        @subtotalDiscountAdjustment.Formatted().WithoutTax
                    </td>
                </tr>
            }
        }
        @if (shippingMethod != null)
        {
            <tr>
                <td>
                    Shipping via @shippingMethod.Name
                </td>
                <td>
                    @if (Model.ShippingInfo.TotalPrice.WithoutAdjustments.WithoutTax != Model.ShippingInfo.TotalPrice.Value.WithoutTax)
                    {
                        <text><span>@Model.ShippingInfo.TotalPrice.WithoutAdjustments</span> </text>
                    }
                    @Model.ShippingInfo.TotalPrice.Value.Formatted().WithoutTax
                </td>
            </tr>
        }
        @if (paymentMethod != null)
        {
            <tr>
                <td>
                    Payment via @paymentMethod.Name
                </td>
                <td>
                    @if (Model.PaymentInfo.TotalPrice.WithoutAdjustments.WithoutTax != Model.PaymentInfo.TotalPrice.Value.WithoutTax)
                    {
                        <text><span>@Model.PaymentInfo.TotalPrice.WithoutAdjustments</span> </text>
                    }
                    @Model.PaymentInfo.TotalPrice.Value.Formatted().WithoutTax
                </td>
            </tr>
        }
        <tr>
            <td><strong>Net Total</strong></td>
            <td>
                <strong>
                    @Model.TotalPrice.WithPreviousAdjustments.Formatted().WithoutTax
                </strong>
            </td>
        </tr>
        @{
            var totalFeesAdjustment = Model.TotalPrice.Adjustments.Where(adj => adj.Price.WithTax > 0).Sum(Model.CurrencyId);
            if (totalFeesAdjustment > 0)
            {
                <tr>
                    <td>
                        Net Total Fees
                    </td>
                    <td>
                        @totalFeesAdjustment.Formatted().WithoutTax
                    </td>
                </tr>
            }

            var totalDiscountAdjustment = Model.TotalPrice.Adjustments.Where(adj => adj.Price.WithTax < 0).Sum(Model.CurrencyId);
            if (totalDiscountAdjustment < 0)
            {
                <tr>
                    <td>
                        Net Total Discount
                    </td>
                    <td>
                        @totalDiscountAdjustment.Formatted().WithoutTax
                    </td>
                </tr>
            }
        }
        <tr>
            <td>
                TAX
            </td>
            <td>
                @Model.TotalPrice.Value.Formatted().Tax
            </td>
        </tr>
        @{
            var totalGiftCardAdjustment = Model.GetTotalAmountAdjustmentByType<GiftCardAdjustment>();
            if (totalGiftCardAdjustment != 0)
            {
                <tr>
                    <td>
                        Gift Card<br />
                        <style class="color:#a0aec0; font-size: 12px;">@(string.Join(", ", Model.GiftCards.Select(x => x.Code)))</style>
                    </td>
                    <td>
                        @(totalGiftCardAdjustment.Formatted())
                    </td>
                </tr>
            }
        }
        @if (Model.TransactionInfo.TransactionFee.Value > 0M)
        {
            <tr>
                <td>
                    Transaction fee
                </td>
                <td>
                    @Model.TransactionInfo.TransactionFee.Formatted()
                </td>
            </tr>
        }
        <tr>
            <td>
                <strong>Order Total</strong>
            </td>
            <td>
                <strong>
                    @Model.TransactionAmount.Value.Formatted()
                </strong>
            </td>
        </tr>
    </table>
</div>